pipeline {
    agent { label 'cimp' }

    environment {
        // ƒê·ªãnh nghƒ©a registry (v√≠ d·ª•: docker.io/yourname/)
        DOCKER_REGISTRY = ${DOCKER_REGISTRY}
        DOCKER_USER = ${DOCKER_USER}
        // D√≤ng build docker-compose ch·ªâ build 3 service c·∫ßn thi·∫øt
        BUILD_COMPOSE = "sudo docker compose -f docker-compose.yml build biometrics.apiservice biometrics.web apigateway"
    }

    stages {
        stage('Prepare') {
            steps {
                // ƒê·∫£m b·∫£o docker.sock c√≥ quy·ªÅn ph√π h·ª£p
                sh 'sudo chmod 666 /var/run/docker.sock'
            }
        }

        stage('Build Images') {
            steps {
                echo "üõ†Ô∏è  Building containers via docker-compose..."
                sh "${BUILD_COMPOSE}"
                echo "üîñ  Tagging images with registry prefix..."
                sh "docker tag biometricsapiservice:latest ${DOCKER_REGISTRY}biometricsapiservice:latest"
                sh "docker tag biometricsweb:latest       ${DOCKER_REGISTRY}biometricsweb:latest"
                sh "docker tag apigateway:latest          ${DOCKER_REGISTRY}apigateway:latest"
            }
        }

        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: ${CREDENTIALS_ID},
                    usernameVariable: ${DOCKER_USER},
                    passwordVariable: ${DOCKER_PASS}
                )]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}"
                    sh "docker push ${DOCKER_REGISTRY}biometricsapiservice:latest"
                    sh "docker push ${DOCKER_REGISTRY}biometricsweb:latest"
                    sh "docker push ${DOCKER_REGISTRY}apigateway:latest"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                // Assumes you've stored your kubeconfig in Jenkins credentials
                withCredentials([file(credentialsId: ${KUBE_CONFIG_CREDENTIALS_ID}, variable: ${KUBECONFIG_FILE})]) {
                    sh 'export KUBECONFIG=${KUBECONFIG_FILE}'
                    // S·ª≠a Deployment.yml template n·∫øu c·∫ßn inject tag kh√°c
                    sh '''
                      sed -e "s|<IMAGE_REGISTRY>|${DOCKER_REGISTRY}|g" \
                          -e "s|<BUILD_TAG>|latest|g" \
                          Deployment.yml | kubectl apply -f -
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed."
        }
    }
}
